{"ast":null,"code":"var _jsxFileName = \"/Users/huminxuan/Desktop/ass7 weather app/submit/assignment7/weather-application/src/view/weatherDetail.jsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Weather from \"../component/weatherHours.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\n\nclass Main extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async () => {\n      const country = this.getUrlParam('country');\n      const city = this.getUrlParam('city');\n      const num = this.getUrlParam('id');\n\n      if (country && city) {\n        const api_forecast = await fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&APPID=5e77b5f6511456533228a4c91142bfc7\"));\n        const response_forecast = await api_forecast.json();\n        console.log(response_forecast);\n        let forecast = [];\n\n        for (let i = parseInt(num) * 8, j = 0; j < 8; i++, j++) {\n          forecast[j] = {\n            city: \"\".concat(response_forecast.city.name, \", \").concat(response_forecast.city.country),\n            country: response_forecast.city.country,\n            main: response_forecast.list[i].weather[0].main,\n            icon: this.get_WeatherIcon(this.weatherIcon, response_forecast.list[i].weather[0].id),\n            celsius: this.calCelsius(response_forecast.list[i].main.temp),\n            temp_max: this.calCelsius(response_forecast.list[i].main.temp_max),\n            temp_min: this.calCelsius(response_forecast.list[i].main.temp_min),\n            description: response_forecast.list[i].weather[0].description,\n            date: response_forecast.list[i].dt_txt\n          };\n        }\n\n        console.log(forecast);\n        this.setState({\n          weather: forecast\n        });\n        /* this.setState({country:country});\r\n         this.setState({city:city});\r\n         this.setState({num:num});*/\n        // seting icons\n      } else {}\n    };\n\n    this.state = {\n      weather: [],\n      num: null,\n      city: '',\n      country: ''\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        return icons.Thunderstorm;\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        return icons.Drizzle;\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        return icons.Rain;\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        return icons.Snow;\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        return icons.Atmosphere;\n        break;\n\n      case rangeId === 800:\n        return icons.Clear;\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        return icons.Clouds;\n        break;\n\n      default:\n        return icons.Clouds;\n    }\n  }\n\n  getUrlParam(name) {\n    const reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');\n    const r = window.location.hash.substr(16).match(reg);\n    if (r != null) return decodeURIComponent(r[2]);\n    return null;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  toNextday() {\n    this.props.history.push('/weatherDetail?id=' + (parseInt(this.getUrlParam('id')) + 1) + '&city=' + this.getUrlParam('city') + '&country=' + this.getUrlParam('country'));\n    this.getWeather();\n  }\n\n  render() {\n    this.getWeather();\n    let items = [];\n\n    for (let i = 0; i < this.state.weather.length; i++) {\n      items.push(React.createElement(\"div\", {\n        className: \"col-md-3\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Weather, {\n        city: this.state.weather[i].city,\n        weatherIcon: this.state.weather[i].icon,\n        temp_celsius: this.state.weather[i].celsius,\n        temp_max: this.state.weather[i].temp_max,\n        temp_min: this.state.weather[i].temp_min,\n        description: this.state.weather[i].description,\n        date: this.state.weather[i].date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"text-light city-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.getUrlParam('city'), React.createElement(\"button\", {\n      className: \"btn btn-warning nextday\",\n      onClick: this.toNextday.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Next Day\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, items)));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/huminxuan/Desktop/ass7 weather app/submit/assignment7/weather-application/src/view/weatherDetail.jsx"],"names":["React","Weather","Main","Component","constructor","getWeather","country","getUrlParam","city","num","api_forecast","fetch","response_forecast","json","console","log","forecast","i","parseInt","j","name","main","list","weather","icon","get_WeatherIcon","weatherIcon","id","celsius","calCelsius","temp","temp_max","temp_min","description","date","dt_txt","setState","state","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","reg","RegExp","r","window","location","hash","substr","match","decodeURIComponent","cell","Math","floor","toNextday","props","history","push","render","items","length","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport Weather from \"../component/weatherHours.component\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"weather-icons/css/weather-icons.css\";\r\nclass Main extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      weather:[],\r\n      num:null,\r\n      city:'',\r\n      country:''\r\n    };\r\n    this.weatherIcon = {\r\n      Thunderstorm: \"wi-thunderstorm\",\r\n      Drizzle: \"wi-sleet\",\r\n      Rain: \"wi-storm-showers\",\r\n      Snow: \"wi-snow\",\r\n      Atmosphere: \"wi-fog\",\r\n      Clear: \"wi-day-sunny\",\r\n      Clouds: \"wi-day-fog\"\r\n    };\r\n  }\r\n\r\n  get_WeatherIcon(icons, rangeId) {\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId < 232:\r\n        return icons.Thunderstorm\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        return icons.Drizzle\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 521:\r\n        return icons.Rain\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        return icons.Snow\r\n        break;\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        return icons.Atmosphere\r\n        break;\r\n      case rangeId === 800:\r\n        return icons.Clear\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        return icons.Clouds\r\n        break;\r\n      default:\r\n        return icons.Clouds\r\n    }\r\n  }\r\n\r\n  getUrlParam(name) {\r\n    const reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');\r\n    const r = window.location.hash.substr(16).match(reg);\r\n    if (r != null) return decodeURIComponent(r[2]); return null;\r\n  }\r\n\r\n  calCelsius(temp) {\r\n    let cell = Math.floor(temp - 273.15);\r\n    return cell;\r\n  }\r\n\r\n  toNextday(){\r\n    this.props.history.push('/weatherDetail?id='+(parseInt(this.getUrlParam('id'))+1)+'&city='+this.getUrlParam('city')+'&country='+this.getUrlParam('country'))\r\n    this.getWeather()\r\n  }\r\n\r\n  getWeather=async ()=> {\r\n    const country = this.getUrlParam('country');\r\n    const city = this.getUrlParam('city');\r\n    const num= this.getUrlParam('id');\r\n\r\n    if (country && city) {\r\n      const api_forecast = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=5e77b5f6511456533228a4c91142bfc7`);\r\n      const response_forecast = await api_forecast.json();\r\n      console.log(response_forecast)\r\n      let forecast=[]\r\n      for(let i=parseInt(num)*8,j=0;j<8;i++,j++){\r\n        forecast[j]={\r\n          city: `${response_forecast.city.name}, ${response_forecast.city.country}`,\r\n          country: response_forecast.city.country,\r\n          main: response_forecast.list[i].weather[0].main,\r\n          icon:this.get_WeatherIcon(this.weatherIcon, response_forecast.list[i].weather[0].id),\r\n          celsius: this.calCelsius(response_forecast.list[i].main.temp),\r\n          temp_max: this.calCelsius(response_forecast.list[i].main.temp_max) ,\r\n          temp_min: this.calCelsius(response_forecast.list[i].main.temp_min),\r\n          description: response_forecast.list[i].weather[0].description,\r\n          date: response_forecast.list[i].dt_txt\r\n        }\r\n      }\r\n      console.log(forecast)\r\n      this.setState({weather:forecast});\r\n     /* this.setState({country:country});\r\n      this.setState({city:city});\r\n      this.setState({num:num});*/\r\n      // seting icons\r\n\r\n    } else {\r\n\r\n    }\r\n  };\r\n\r\n  render() {\r\n    this.getWeather()\r\n    let items = []\r\n    for(let i=0;i<this.state.weather.length;i++){\r\n      items.push(\r\n        <div className=\"col-md-3\" key={i}>\r\n          <Weather\r\n            city={this.state.weather[i].city}\r\n            weatherIcon={this.state.weather[i].icon}\r\n            temp_celsius={this.state.weather[i].celsius}\r\n            temp_max={this.state.weather[i].temp_max}\r\n            temp_min={this.state.weather[i].temp_min}\r\n            description={this.state.weather[i].description}\r\n            date={this.state.weather[i].date}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <h1 className=\"text-light city-title\">\r\n            {this.getUrlParam('city')}\r\n            <button className=\"btn btn-warning nextday\" onClick={this.toNextday.bind(this)}>Next Day</button>\r\n          </h1>\r\n          <div className=\"row\">\r\n            {items}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}